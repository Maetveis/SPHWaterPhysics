#version 450

//Max particles in grid cell is 64
layout(local_size_x = 64) in;

layout(std430) restrict readonly buffer positionBuffer
{
    vec3 position[];
};

layout(std430) restrict writeonly buffer pressureBuffer
{
	float pressure[];
};

layout(std430) restrict writeonly buffer densityBuffer
{
    float density[];
};

layout(std430) restrict readonly buffer gridBuffer
{
	uint gridOffset[];
};

const uint numGridCells = 32;
const uint numGridCellsCubed = numGridCells * numGridCells * numGridCells;//gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;
const uint numParticles = 0x40000;

const float Mass = 0.02;
const float Pi = 3.141592653589793;

layout(location = 0) uniform float SmoothingLength;
layout(location = 1) uniform float Stiffness;
layout(location = 2) uniform float RestDensity;

shared vec3 sharedPosition[27 * 16];
shared float sharedDensity[16][4];

struct gridCell
{
	uint globalOffset;
	uint localOffset;
	uint len;
};

shared gridCell gridIndex[3][3][3];
shared uint particleCount;

uint particleIndex = gl_LocalInvocationIndex / 4;
uint particleSubIndex = gl_LocalInvocationIndex % 4;

void loadPositions00()
{
    for(int x = 0; x < 2; ++x)
    {
        for(int z = 0; z < 3; ++z)
        {
            if(particleIndex < gridIndex[x][0][z].len)
                sharedPosition[gridIndex[x][0][z].localOffset + particleIndex] = position[gridIndex[x][0][z].globalOffset + particleIndex];
        }
    }
}

void loadPositions01()
{
    for(int x = 0; x < 2; ++x)
    {
        for(int y = 1; y < 3; ++y)
        {
            for(int z = 0; z < 3; ++z)
            {
                if(particleIndex < gridIndex[x][y][z].len)
                    sharedPosition[gridIndex[x][y][z].localOffset + particleIndex] = position[gridIndex[x][y][z].globalOffset + particleIndex];
            }
        }
    }
}

void loadPositions10()
{
    for(int y = 0; y < 2; ++y)
    {
        for(int z = 0; z < 3; ++z)
        {
            if(particleIndex < gridIndex[2][y][z].len)
                sharedPosition[gridIndex[2][y][z].localOffset + particleIndex] = position[gridIndex[2][y][z].globalOffset + particleIndex];
        }
    }
}

void loadPositions11()
{
    for(int z = 0; z < 3; ++z)
    {
        if(particleIndex < gridIndex[2][2][z].len)
            sharedPosition[gridIndex[2][2][z].localOffset + particleIndex] = position[gridIndex[2][2][z].globalOffset + particleIndex];
    }
}

void loadPositions()
{
    switch(particleSubIndex)
    {
        case 0:
            loadPositions00();
            break;
        case 1:
            loadPositions01();
            break;
        case 2:
            loadPositions10();
            break;
        case 3:
            loadPositions11();
            break;
    }
}

float kernel(const in float r2)
{
	//Poly6 kernel
    return  315.f * pow(SmoothingLength * SmoothingLength - r2, 3) / (64.f * Pi * pow(SmoothingLength, 9));
}

void updatePressure()
{
    if(particleIndex >= gridIndex[1][1][1].len)
	   return;

	vec3 selfpos = sharedPosition[gridIndex[1][1][1].localOffset + particleIndex];
	float selfDensity = 0;

	for(uint index = particleSubIndex * 4; index < (particleCount / 4) * (particleSubIndex + 1); ++index)
	{
		vec3 deltaPos = sharedPosition[index] - selfpos;
		float r2 = dot(deltaPos, deltaPos);
		if(r2 < SmoothingLength * SmoothingLength)
		{
			selfDensity += kernel(r2);
		}
	}
    if(particleSubIndex == 3)
    {
        for(uint index = (particleCount / 4) * (particleSubIndex + 1); index < particleCount; ++index)
        {
            vec3 deltaPos = sharedPosition[index] - selfpos;
            float r2 = dot(deltaPos, deltaPos);
            if(r2 < SmoothingLength * SmoothingLength)
            {
                selfDensity += kernel(r2);
            }
        }
    }

    sharedDensity[particleIndex][particleSubIndex] = selfDensity;
}

void calculateGridIndices()
{
	uint localOffset = 0;

	for(int x = 0; x < 3; ++x)
	{
		for(int y = 0; y < 3; ++y)
		{
			for(int z = 0; z < 3; ++z)
			{
                if( any(lessThan(gl_WorkGroupID + uvec3(x, y, z), uvec3(1))) || any(lessThan(uvec3(numGridCells + 1), gl_WorkGroupID + uvec3(x, y, z))) )
                {
                    gridIndex[x][y][z].len = 0;
                    continue;
                }

                uint globalOffset =
                    (gl_WorkGroupID.x + x - 1) * numGridCells * numGridCells +
                    (gl_WorkGroupID.y + y - 1) * numGridCells +
                    (gl_WorkGroupID.z + z - 1);

				if(globalOffset < numGridCellsCubed - 1)
                {
                    gridIndex[x][y][z].globalOffset = gridOffset[globalOffset];
                    gridIndex[x][y][z].len = min(gridOffset[globalOffset + 1] - gridIndex[x][y][z].globalOffset, 16);
                    gridIndex[x][y][z].localOffset = localOffset;
                }
				else if (globalOffset < numGridCellsCubed)
                {
                    gridIndex[x][y][z].globalOffset = gridOffset[globalOffset];
                    gridIndex[x][y][z].len = min(numParticles - gridIndex[x][y][z].globalOffset, 16);
                    gridIndex[x][y][z].localOffset = localOffset;
                }
				else
                {
                    gridIndex[x][y][z].len = 0;
                }

				localOffset += gridIndex[x][y][z].len;
			}
		}
	}

	particleCount = localOffset;
}

void main()
{
	if(gl_LocalInvocationIndex == 0)
	{
        particleCount = 0;
		calculateGridIndices();
	}

	barrier();
    memoryBarrierShared();

    if(gridIndex[1][1][1].len == 0)
        return;

	loadPositions();

	barrier();
    memoryBarrierShared();

	updatePressure();

    barrier();
    memoryBarrierShared();

    if(particleSubIndex == 0 && particleIndex < gridIndex[1][1][1].len)
    {
        float selfDensity = Mass *
            (sharedDensity[particleIndex][0] +
            sharedDensity[particleIndex][1] +
            sharedDensity[particleIndex][2] +
            sharedDensity[particleIndex][3]);

        density [gridIndex[1][1][1].globalOffset + particleIndex] = selfDensity;
        pressure[gridIndex[1][1][1].globalOffset + particleIndex] = max(Stiffness * (selfDensity - RestDensity), 0);
    }
}
