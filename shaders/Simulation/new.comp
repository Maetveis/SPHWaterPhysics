#version 450

//Max particles in grid cell is 64
layout(local_size_x = 64) in;

layout(std430) restrict readonly buffer positionBuffer
{
    vec3 position[];
};

layout(std430) restrict writeonly buffer pressureBuffer
{
	float pressure[];
};

layout(std430) restrict writeonly buffer densityBuffer
{
    float density[];
};

layout(std430) restrict readonly buffer gridBuffer
{
	uint gridOffset[];
};

layout(std430) restrict buffer edgeBuffer
{
    uint count;
    vec3 position[];
} edgeParticles;

const uint numGridCells = 20;
const uint numGridCellsCubed = numGridCells * numGridCells * numGridCells;//gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;
const uint numParticles = 0x40000;

const float Mass = 0.02;
const float Pi = 3.141592653589793;

const float EdgeThreshHold = 0.001;

layout(location = 0) uniform float SmoothingLength;
layout(location = 1) uniform float Stiffness;
layout(location = 2) uniform float RestDensity;

shared vec3 sharedPosition[64];
shared float sharedDensity[64];

struct Sum
{
    float count;
    vec3 sum;
};

shared Sum sharedCenter[64];

struct gridCell
{
	uint globalOffset;
	uint len;
};

shared gridCell gridIndex[27];

vec3 selfPosition;

uint numThreadsBase;
uint numThreads;
uint particleIndex;
uint particleSubIndex;

void calculateGridIndices()
{
    ivec3 offset = ivec3(int((gl_LocalInvocationIndex) / 9) - 1, int((gl_LocalInvocationIndex % 9) / 3) - 1, int(gl_LocalInvocationIndex % 3) - 1);

    ivec3 cellIndex = ivec3(gl_WorkGroupID) + offset;

    if(any(lessThan(cellIndex, ivec3(0, 0, 0))) || any(greaterThanEqual(cellIndex, ivec3(numGridCells, numGridCells, numGridCells))) )
    {
        gridIndex[gl_LocalInvocationIndex].len = 0;
        return;
    }

    uint globalOffset =
        cellIndex.x * numGridCells * numGridCells +
        cellIndex.y * numGridCells +
        cellIndex.z;

    if(globalOffset < numGridCellsCubed - 1)
    {
        gridIndex[gl_LocalInvocationIndex].globalOffset = gridOffset[globalOffset];
        gridIndex[gl_LocalInvocationIndex].len = min(gridOffset[globalOffset + 1] - gridIndex[gl_LocalInvocationIndex].globalOffset, 64);
    }
    else if(globalOffset == numGridCellsCubed - 1)
    {
        gridIndex[gl_LocalInvocationIndex].globalOffset = gridOffset[globalOffset];
        gridIndex[gl_LocalInvocationIndex].len = min(numParticles - gridIndex[gl_LocalInvocationIndex].globalOffset, 64);
    }
    else
    {
        gridIndex[gl_LocalInvocationIndex].len = 0;
    }
}

void loadSelfData()
{
    numThreadsBase = gl_WorkGroupSize.x / gridIndex[13].len;
    numThreads = numThreadsBase;

    if(gl_LocalInvocationIndex < numThreadsBase * gridIndex[13].len)
    {
        particleIndex = gl_LocalInvocationIndex / numThreadsBase;
        particleSubIndex = gl_LocalInvocationIndex % numThreadsBase;
    } else {
        particleIndex = gl_LocalInvocationIndex % gridIndex[13].len;
        particleSubIndex = numThreads;
    }

    if(particleIndex < gl_WorkGroupSize.x % gridIndex[13].len)
        ++numThreads;

    selfPosition = position[gridIndex[13].globalOffset + particleIndex];
    if(particleSubIndex == 0)
    {
        sharedPosition[particleIndex] = selfPosition;
    }

    sharedDensity[gl_LocalInvocationIndex] = 0;
    sharedCenter[gl_LocalInvocationIndex] = Sum(0, vec3(0));
}

float poly6(float rsquared)
{
    return
        (315.0 / 64.0 / Pi / pow(SmoothingLength, 9)) *
        pow(SmoothingLength * SmoothingLength - rsquared, 3);
}

void processGrid(uint grid)
{
    for(uint index = particleSubIndex; index < gridIndex[grid].len; index += numThreads)
    {
        vec3 deltaPos = sharedPosition[index] - selfPosition;
		float rsquared = dot(deltaPos, deltaPos);
		if(rsquared < SmoothingLength * SmoothingLength)
		{
            float kern = poly6(rsquared);
            sharedCenter[gl_LocalInvocationIndex].count += kern;
            sharedCenter[gl_LocalInvocationIndex].sum += kern * deltaPos;
			sharedDensity[gl_LocalInvocationIndex] += kern;//poly6(rsquared);
		}
    }
}

void loadGrid(uint grid)
{
    if(gl_LocalInvocationIndex < gridIndex[grid].len)
    {
        sharedPosition[gl_LocalInvocationIndex] = position[gridIndex[grid].globalOffset + gl_LocalInvocationIndex];
    }
}

void main()
{
	if(gl_LocalInvocationIndex < 27)
	{
		calculateGridIndices();
	}

	barrier();
    memoryBarrierShared();

    if(gridIndex[13].len > 0)
    {
        loadSelfData();
        processGrid(13);
    }

    for(uint index = 0; index < 27; ++index)
    {
        if(index == 13)
            continue;

        if(gridIndex[13].len > 0 && gridIndex[index].len > 0)
            loadGrid(index);

        barrier();
        memoryBarrierShared();

        if(gridIndex[13].len > 0 && gridIndex[index].len > 0)
            processGrid(index);
    }

    barrier();
    memoryBarrierShared();

    if(gridIndex[13].len > 0 && particleSubIndex == 0)
    {
        float selfDensity = 0;
        Sum midPoint;
        for(uint index = 0; index < numThreadsBase; ++index)
        {
            selfDensity += sharedDensity[particleIndex * numThreadsBase + index];
            midPoint.sum += sharedCenter[particleIndex * numThreadsBase + index].sum;
            midPoint.count += sharedCenter[particleIndex * numThreadsBase + index].count;
        }

        if(numThreads > numThreadsBase)
        {
            selfDensity += sharedDensity[gridIndex[13].len + particleIndex];
            midPoint.sum += sharedCenter[gridIndex[13].len + particleIndex].sum;
            midPoint.count += sharedCenter[gridIndex[13].len + particleIndex].count;
        }

        selfDensity *= Mass;

        density [gridIndex[13].globalOffset + particleIndex] = /*max(*/selfDensity/*, 0.000001)*/;
        pressure[gridIndex[13].globalOffset + particleIndex] = max(Stiffness * (selfDensity - RestDensity), 0.0);

        if(midPoint.count > 300 && length(midPoint.sum / midPoint.count) > EdgeThreshHold)
        {
            uint offset = atomicAdd(edgeParticles.count, 1);
            edgeParticles.position[offset] = selfPosition;
        }
    }
}
